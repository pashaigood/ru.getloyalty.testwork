{"version":3,"sources":["scripts/app-5b23712444.js"],"names":["angular","module","keypress","directive","restrict","link","$scope","$element","on","event","String","fromCharCode","which","test","val","preventDefault","data","$filter","orderBy","getData","Name","Percent","normalize","dataSet","element","coeff","self","this","sum","normalizedPart","forEach","elem","finalizeElement","Math","round","_Percent","format","isString","replace","parseFloat","recalculate","changedElement","value","oldValue","order","cnt","length","shift","newValue","factory","$inject","MainController","dataFactory","init","vm","selectSet","change","controller","runBlock","$log","debug","run","constant","config","$logProvider","debugEnabled","$templateCache","put"],"mappings":"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","file":"scripts/app-5b23712444.js","sourcesContent":["(function() {\n  'use strict';\n\n  angular\n    .module('testWork', []);\n\n})();\n\n(function () {\n    angular\n        .module('testWork')\n        .directive('keypressMaskerade', keypress);\n\n    /** @ngInject */\n    function keypress() {\n        var directive = {\n            restrict: 'A',\n            link: function ($scope, $element) {\n                $element.on('keypress', function (event) {\n                    if (String.fromCharCode(event.which) == ',') {\n                        if (! /\\./.test($element.val())) {\n                            $element.val($element.val() + '.');\n                        }\n                        event.preventDefault();\n                    }\n                });\n            }\n        };\n\n        return directive;\n    }\n})();\n(function () {\n    angular\n        .module('testWork')\n        .factory('dataFactory', data);\n\n    /** @ngInject */\n    function data($filter) {\n\n        var orderBy = $filter('orderBy');\n\n        return {\n            /**\n             * Метод возвращает тестовые данные.\n             * @returns {*[]}\n             */\n            getData: function () {\n                return [\n                    // First data set\n                    [\n                        {\n                            Name: 'Item 1',\n                            Percent: '20,4'\n                        }\n                    ],\n                    // Second data set\n                    [\n                        {\n                            Name: 'Item 1',\n                            Percent: 20\n                        },\n                        {\n                            Name: 'Item 2',\n                            Percent: 40\n                        }\n                    ],\n                    // Third data set\n                    [\n                        {\n                            Name: 'Item 1',\n                            Percent: 20\n                        },\n                        {\n                            Name: 'Item 2',\n                            Percent: 30\n                        },\n                        {\n                            Name: 'Item 3',\n                            Percent: 50\n                        }\n                    ],\n                    // Fourth data set\n                    [\n                        {\n                            Name: 'Item 1',\n                            Percent: '20,67'\n                        },\n                        {\n                            Name: 'Item 2',\n                            Percent: '40.45'\n                        },\n                        {\n                            Name: 'Item 3',\n                            Percent: 60\n                        },\n                        {\n                            Name: 'Item 4',\n                            Percent: 0\n                        }\n                    ]\n                ];\n            },\n\n            /**\n             * Метод нормализует набор данных.\n             * При передачи второго параметра, нормализация\n             * происходит относительно переданного элемента.\n             *\n             * @example\n             * // В Наборе есть данные проценты: [20, 30, 50, 0]\n             * // Пользователь изменил 4 параметр на 90\n             * normalize(vm.dataSet, vm.dataSet[2]);\n             * // В этом случаи значение 4 параметра останется 90,\n             * // а в общем значения будут выглядеть как [10, 0, 0, 90].\n             *\n             * @param {Array<Object>} dataSet\n             * @param {Object} element\n             */\n            normalize: function (dataSet, element) {\n                var self = this,\n                    sum = 0,\n                    coeff,\n                    normalizedPart = element ? 100 - element.Percent : 100;\n\n                // Найдём всё количество процентов.\n                angular.forEach(dataSet, function (elem) {\n                    if (element !== elem) {\n                        sum += elem.Percent;\n                    }\n                });\n\n\n                if (normalizedPart === sum) {\n                    return;\n                }\n                // Найдём коэффицент.\n                coeff = sum > 0 ? normalizedPart / sum : 0;\n\n                // Приведём общее значение к 100.\n                angular.forEach(dataSet, function (elem) {\n                    if (element !== elem) {\n                        elem.Percent *= coeff;\n                    }\n                    self.finalizeElement(elem);\n                });\n            },\n\n            /**\n             * Метод финализирует элемент после обработки.\n             * @param {Object} elem\n             */\n            finalizeElement: function (elem) {\n                elem.Percent = Math.round(elem.Percent * 100) / 100;\n                elem._Percent = elem.Percent;\n            },\n\n            /**\n             * Метод формтаирует проценты элемента, преобразует для работы.\n             * @param {Object} elem\n             */\n            format: function (elem) {\n                if (angular.isString(elem.Percent)) {\n                    elem.Percent = elem.Percent.replace(',', '.');\n                    elem.Percent = parseFloat(elem.Percent);\n                }\n            },\n\n            /**\n             * Метод перерасчитывает текущий набор данных,\n             * так чтобы их значение не привышало 100.\n             * @param {Array<Object>} dataSet\n             * @param {Object} elem\n             */\n            recalculate: function (dataSet, elem) {\n                elem.Percent = elem.Percent > 0 ? elem.Percent : 0;\n                elem.Percent = elem.Percent < 100 ? elem.Percent : 100;\n\n                var value = elem.Percent,\n                    oldValue = elem._Percent,\n                    changedElement,\n                    order = [];\n\n                // Если значение уменьшилось,\n                if (value < oldValue) {\n\n                    // то это количество передается первому элементу,\n                    // с наименьшим количеством.\n                    order = orderBy(dataSet, ['Percent', 'Name']);\n\n                }\n                else\n                // Если значение увеличилось,\n                if (value > oldValue) {\n                    // то это количество компенсируется первым\n                    // элементом с наибольшим количеством.\n                    order = orderBy(dataSet, ['-Percent', 'Name']);\n                }\n                else {\n                    return;\n                }\n\n\n                var cnt = order.length;\n                while ((cnt -= 1) > -1) {\n\n                    while ((changedElement = order.shift()) === elem) {\n                        // Убедимся, что элемент не являеться сам сабой.\n                    }\n\n                    if (changedElement) {\n                        var newValue = changedElement.Percent + (oldValue - value);\n\n                        // Если значение получиться меньше нуля,\n                        // То отнимаем только то, что до нуля.\n                        // Перём следующий элемент из сортировки и проделываем тоже самое с ним.\n\n                        if (newValue < 0) {\n                            // Найдём количество процентов,\n                            // которые ещё не компенсировали.\n                            // И компенсируем его у следующего элемента.\n                            oldValue = value + newValue;\n                            changedElement.Percent = 0;\n                            this.finalizeElement(changedElement);\n                            continue;\n\n                        }\n                        else if (newValue > 100) {\n                            changedElement.Percent = 100;\n                        }\n                        else {\n                            changedElement.Percent = newValue;\n                        }\n\n                        this.finalizeElement(changedElement);\n                        this.finalizeElement(elem);\n                        break;\n\n                    }\n\n                }\n\n            }\n\n\n        };\n    }\n})();\n(function () {\n    'use strict';\n\n    angular\n        .module('testWork')\n        .controller('MainController', MainController);\n\n    /** @ngInject */\n    function MainController(dataFactory) {\n        var vm = this;\n\n        function init() {\n            var data = vm.data = dataFactory.getData();\n            if (vm.data.length) {\n                vm.selectSet(data[data.length - 1]);\n            }\n        }\n\n\n        /**\n         * Метод выбирает набор данных.\n         * @param {Array<Object>} dataSet\n         */\n        vm.selectSet = function (dataSet) {\n            vm.dataSet = dataSet;\n            angular.forEach(dataSet, function (elem) {\n                dataFactory.format(elem);\n            });\n            dataFactory.normalize(vm.dataSet);\n        };\n\n        /**\n         * Метод обрабатывает изменение процентов в моделе.\n         * @param {Object} elem\n         */\n        vm.change = function (elem) {\n            dataFactory.format(elem);\n            dataFactory.recalculate(vm.dataSet, elem);\n            dataFactory.normalize(vm.dataSet, elem);\n        };\n\n\n\n        init();\n    }\n})();\n\n(function() {\n  'use strict';\n\n  angular\n    .module('testWork')\n    .run(runBlock);\n\n  /** @ngInject */\n  function runBlock($log) {\n\n    $log.debug('runBlock end');\n  }\n\n})();\n\n(function() {\n  'use strict';\n\n  angular\n    .module('testWork')\n    .constant('empty', false);\n\n})();\n\n(function() {\n  'use strict';\n\n  angular\n    .module('testWork')\n    .config(config);\n\n  /** @ngInject */\n  function config($logProvider) {\n    // Enable log\n    $logProvider.debugEnabled(true);\n\n    // Set options third-party lib\n  }\n\n})();\n\nangular.module(\"testWork\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"app/main/main.html\",\"<nav><ul class=\\\"pagination\\\"><li ng-repeat=\\\"set in main.data\\\" ng-class=\\\"{\\'active\\': set == main.dataSet}\\\"><a href=\\\"#\\\" ng-click=\\\"main.selectSet(set)\\\">Набор данных {{$index+1}}</a></li></ul></nav><ul class=\\\"list-unstyled\\\"><li ng-repeat=\\\"item in main.dataSet\\\"><div class=\\\"row form-group\\\"><div class=\\\"col-xs-10\\\"><input class=\\\"form-control\\\" type=\\\"range\\\" ng-model=\\\"item.Percent\\\" ng-change=\\\"main.change(item)\\\"></div><div class=\\\"col-xs-2\\\"><input class=\\\"form-control\\\" tabindex=\\\"{{$index+1}}\\\" type=\\\"number\\\" ng-model=\\\"item.Percent\\\" ng-change=\\\"main.change(item)\\\" keypress-maskerade=\\\"\\\"></div></div></li></ul><ul class=\\\"list-unstyled\\\"><li ng-repeat=\\\"item in main.dataSet\\\">{{item.Name}}: {{item.Percent}}%</li></ul>\");}]);"],"sourceRoot":"/source/"}